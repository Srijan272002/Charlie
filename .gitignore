# Charlie AI Assistant - .gitignore

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For PyCharm
#  Community Edition, use 'PyCharm CE' and for PyCharm Professional Edition, use 'PyCharm'.
.idea/

# VSCode
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
desktop.ini

# Windows specific
*.tmp
*.temp
*.bak
*.old

# FastAPI specific
.pytest_cache/
.coverage
htmlcov/

# AI/ML specific
*.pkl
*.pickle
*.joblib
*.h5
*.hdf5
*.pb
*.onnx
models/
checkpoints/
data/raw/
data/processed/
experiments/
wandb/
mlruns/

# Google Cloud / AI Services
*.json
service-account-*.json
credentials/
gcp-credentials.json
google-credentials.json

# Audio files (for voice processing)
*.wav
*.mp3
*.m4a
*.flac
*.ogg
temp_audio/
recordings/

# Database
*.db
*.sqlite
*.sqlite3
database.db
charlie.db

# Logs
logs/
*.log
*.log.*
access.log
error.log
debug.log
celery.log
worker.log

# Redis dumps
dump.rdb

# Temporary files and directories
tmp/
temp/
.tmp/
charlie_tasks/
temp_files/
upload_files/
downloads/

# Configuration files with secrets
config/local.py
config/production.py
settings/local.py
settings/production.py
.env.local
.env.production
.env.development
secrets.json
local_config.json

# API keys and credentials
api_keys.txt
credentials.txt
secrets.txt
.secrets
.credentials

# Email attachments and temp files
email_attachments/
temp_attachments/

# Task execution artifacts
task_outputs/
script_outputs/
execution_logs/

# Memory and conversation data
conversation_data/
memory_backups/

# System specific
.python-version
.tool-versions

# Docker
.dockerignore
docker-compose.override.yml
.docker/

# Kubernetes
*.yaml.local
*.yml.local

# Node.js (if any frontend)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Backup files
*.backup
*.bak
*.orig

# Version files (auto-generated)
0.0.6
0.1.9
0.10.1
0.104.0
0.12.1
0.13.0
0.2.11
0.24.0
0.3.0
1.7.4
2.0.0
2.1.0
2.16.0
2.22.0
2.5.0
23.2.1
3.3.0
5.0.0
5.3.0
5.9.6

# Testing artifacts
test_outputs/
test_results/
test_data/generated/

# Documentation build
docs/build/
docs/_build/

# Local development scripts
local_test.py
debug_*.py
temp_*.py

# Email templates and temporary files
email_templates/temp/

# Voice processing temporary files
voice_temp/
tts_cache/
stt_cache/

# AI model cache
.cache/
model_cache/
ai_cache/

# Profiling data
*.prof
profile_*.txt

# Memory profiling
*.mprof
mprofile_*.dat

# Coverage files
.coverage.*
coverage/

# Local database backups
*.dump
*.sql.backup 